age.group3$age.group == "adult.21-30"] &
luxury >age.group3$avg[
age.group3$age.group == "child"],"teen",
ifelse(is.na(age.group) == TRUE &
CryoSleep == "False" &
luxury == age.group3$avg[
age.group3$age.group == "child"],
"child",age.group))))))))
age.group4 <- unseen.clean %>%
filter(CryoSleep == "False") %>%
select(luxury,
age.group) %>%
group_by(age.group) %>%
summarise(n = n(),
avg = mean(luxury)) %>%
arrange(desc(avg))
data.frame(group = age.group3$age.group,
Lux.avg.before = age.group3$avg,
Lux.avg.after = age.group4$avg,
n.before = age.group3$n,
n.after = age.group4$n) %>%
mutate(diff = n.after - n.before)
mean.age3 <- unseen.clean %>%
filter(CryoSleep == "False") %>%
select(Age,
age.group) %>%
group_by(age.group) %>%
drop_na() %>%
summarise(n = n(),
avg = mean(Age),
median = median(Age))
mean.luxury3 <- unseen.clean %>%
filter(CryoSleep == "False") %>%
select(age.group,
luxury) %>%
group_by(age.group) %>%
drop_na() %>%
summarise(n = n(),
avg = mean(luxury),
median = median(luxury))
age.lux.3 <- data.frame(group = mean.luxury3$age.group,
avg.luxury = mean.luxury3$avg,
avg.age = mean.age3$avg,
n = mean.age3$n) %>%
arrange(desc(avg.luxury))
age.lux.3
unseen.clean <- unseen.clean %>%
mutate(Age = ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "adult.31-40",
age.lux.3$avg.age[age.lux.3$group == "adult.31-40"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "adult.51-60",
age.lux.3$avg.age[age.lux.3$group == "adult.51-60"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "adult.41-50",
age.lux.3$avg.age[
age.lux.3$group == "adult.41-50"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "elder",
age.lux.3$avg.age[
age.lux.3$group == "elder"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "adult.21-30",
age.lux.3$avg.age[
age.lux.3$group == "adult.21-30"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "teen",
age.lux.3$avg.age[
age.lux.3$group == "teen"],
ifelse(CryoSleep == "False" &
is.na(Age) == TRUE &
age.group == "child",
age.lux.3$avg.age[
age.lux.3$group =="child"],Age))))))))
mean.age4 <- unseen.clean %>%
filter(CryoSleep == "False") %>%
select(Age,
age.group) %>%
group_by(age.group) %>%
summarise(n = n(),
avg = mean(Age),
median = median(Age))
mean.luxury4 <- unseen.clean %>%
filter(CryoSleep == "False") %>%
select(age.group,
luxury) %>%
group_by(age.group) %>%
drop_na() %>%
summarise(n = n(),
avg = mean(luxury),
median = median(luxury))
age.lux.4 <- data.frame(group = mean.luxury4$age.group,
avg.luxury = mean.luxury4$avg,
avg.age = mean.age4$avg,
n = mean.age4$n) %>%
arrange(desc(avg.luxury))
data.frame(group = age.lux.4$group,
avg.age.before = age.lux.3$avg.age,
avg.age.after = age.lux.4$avg.age,
n.before = age.lux.3$n,
n.after = age.lux.4$n) %>%
mutate(diff = n.after - n.before)
sum(is.na(unseen.clean$Age[unseen.clean$CryoSleep == "True"]))
AgeCryoSleep.yes.before.1 <- unseen.clean %>%
filter(CryoSleep == "True") %>%
group_by(deck) %>%
drop_na() %>%
summarise(avg = mean(Age),
n = n())
unseen.clean <- unseen.clean %>%
mutate(Age = ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "A",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "A"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "B",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "B"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "C",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "C"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "D",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "D"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "E",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "E"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "F",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "F"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "G",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "G"],
ifelse(CryoSleep == "True" &
is.na(Age) == TRUE &
deck == "unknown",
AgeCryoSleep.yes.before.1$avg[
AgeCryoSleep.yes.before.1$deck == "unknown"],Age)))))))))
AgeCryoSleep.yes.after.1 <- unseen.clean %>%
filter(CryoSleep == "True") %>%
group_by(deck) %>%
summarise(avg = mean(Age),
n = n())
data.frame(group = AgeCryoSleep.yes.before.1$deck,
avg.before = AgeCryoSleep.yes.before.1$avg,
avg.after = AgeCryoSleep.yes.after.1$avg,
n.before = AgeCryoSleep.yes.before.1$n,
n.after = AgeCryoSleep.yes.after.1$n) %>%
mutate(diff = n.after - n.before)
which(colSums(is.na(unseen.clean))>0)
# Linear regression of Luxury, Party Size, and Age
train.clean.lm <- train.clean %>%
mutate(Transported = ifelse(Transported == "True",1,0)) %>%
select(Transported,
luxury,
Age,
party.size) %>%
data.frame()
summary(lm(data = train.clean.lm,
Transported ~ luxury +Age +party.size))
table(train.clean$Transported,train.clean$HomePlanet)
chisq.test(train.clean$Transported,train.clean$HomePlanet,correct = FALSE)
train.clean %>%
group_by(HomePlanet,
Transported) %>%
summarise(n = n(),
percent = round(n/nrow(train.clean)*100,2)) %>%
data.frame() %>%
ggplot(aes(x = HomePlanet,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x= HomePlanet,
y=percent),
stat = "identity",
width = 0.5, position = "dodge") +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("Home Planet") +
ylab("Total Passengers (%)") +
ggtitle("Home Planet as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$CryoSleep)
chisq.test(train.clean$Transported,train.clean$CryoSleep,correct = FALSE)
train.clean %>%
group_by(Transported,
CryoSleep) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = CryoSleep,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x =CryoSleep,
y =percent),
stat = "identity",
width = 0.5, position = "dodge") +
scale_x_discrete(label = c("Awake","Sleep")) +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("Cryo Sleep Status") +
ylab("Total Passengers (%)") +
ggtitle("Cryo Sleep Status as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$Destination)
chisq.test(train.clean$Transported,train.clean$Destination,correct = FALSE)
train.clean %>%
group_by(Transported,
Destination) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = Destination,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x =Destination,
y =percent),stat = "identity",
width = 0.5, position = "dodge") +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("Destination") +
ylab("Total Passengers (%)") +
ggtitle("Destination as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$deck)
chisq.test(train.clean$Transported,train.clean$deck,correct = FALSE)
train.clean %>%
group_by(Transported,
deck) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = deck,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x= deck,
y= percent),
stat = "identity",
width = 0.5, position = "dodge") +
scale_x_discrete(label = c("A","B","C","D","E","F","G","T","unknown")) +
theme_minimal()+
scale_fill_brewer(palette = "Paired") +
xlab("Cabin Position (Deck)") +
ylab("Total Passengers (%)") +
ggtitle("Spaceship Deck Position as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$side)
chisq.test(train.clean$Transported,train.clean$side,correct = FALSE)
train.clean %>%
group_by(Transported,
side) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = side,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x= side,
y= percent),
stat = "identity",
width = 0.5,
position = "dodge") +
scale_x_discrete(label = c("Port","Starboard","unknown")) +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("Cabin Position (Side)") +
ylab("Total Passengers (%)") +
ggtitle("Cabin Position (Side) as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$VIP)
chisq.test(train.clean$Transported,train.clean$VIP,correct = FALSE)
train.clean %>%
group_by(Transported,
VIP) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = VIP,
y = n,
fill = Transported)) +
geom_bar(mapping = aes(x= VIP,
y= percent),
stat = "identity",
width = 0.5, position = "dodge") +
scale_x_discrete(label = c("False","True","Unknown")) +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("VIP Status") +
ylab("Total Passengers (%)") +
ggtitle("VIP Status as Predictor for Transported Individuals")
table(train.clean$Transported,train.clean$VR.use)
chisq.test(train.clean$Transported,train.clean$VR.use,correct = FALSE)
train.clean %>%
group_by(Transported,
VR.use) %>%
summarise(n = n(),
percent = n/nrow(train.clean)*100) %>%
data.frame() %>%
ggplot(aes(x = VR.use,
y = percent,
fill = Transported)) +
geom_bar(mapping = aes(x= VR.use,
y= percent),
stat = "identity",
width = 0.5,
position = "dodge") +
scale_x_discrete(label = c("No","unknown","Yes")) +
theme_minimal() +
scale_fill_brewer(palette = "Paired") +
xlab("Using VR Deck") +
ylab("Total Passengers (%)") +
ggtitle("Using VR (yes vs. no) as Predictor for Transported Individuals")
# Train.clean
train.dummy <- train.clean %>%
mutate(Transported = ifelse(Transported == "True",1,0),
CryoSleep = ifelse(CryoSleep == "True",1,0),
side.starboard = ifelse(side == "Starboard",1,0),
side.port = ifelse(side == "Port",1,0),
Earth.home = ifelse(HomePlanet == "Earth",1,0),
Europa.home = ifelse(HomePlanet == "Europa",1,0),
dest.TRAP = ifelse(Destination == "TRAPPIST-1e",1,0),
dest.55 = ifelse(Destination == "55 Cancri e",1,0),
deck.B = ifelse(deck == "B",1,0),
deck.C = ifelse(deck == "C",1,0),
deck.D = ifelse(deck == "D",1,0),
deck.E = ifelse(deck == "E",1,0),
deck.F = ifelse(deck == "F",1,0),
deck.G = ifelse(deck == "G",1,0),
VR.use = ifelse(VR.use == "yes",1,0))
# Unseen.Clean
unseen.dummy <- unseen.clean %>%
mutate(CryoSleep = ifelse(CryoSleep == "True",1,0),
side.starboard = ifelse(side == "Starboard",1,0),
side.port = ifelse(side == "Port",1,0),
Earth.home = ifelse(HomePlanet == "Earth",1,0),
Europa.home = ifelse(HomePlanet == "Europa",1,0),
dest.TRAP = ifelse(Destination == "TRAPPIST-1e",1,0),
dest.55 = ifelse(Destination == "55 Cancri e",1,0),
deck.B = ifelse(deck == "B",1,0),
deck.C = ifelse(deck == "C",1,0),
deck.D = ifelse(deck == "D",1,0),
deck.E = ifelse(deck == "E",1,0),
deck.F = ifelse(deck == "F",1,0),
deck.G = ifelse(deck == "G",1,0),
VR.use = ifelse(VR.use == "yes",1,0))
# train.dummy.1
train.dummy.1 <- train.dummy %>%
select(!c(party.identifiers,
HomePlanet,
deck,
VIP,
RoomService,
FoodCourt,
ShoppingMall,
Spa,
VRDeck,
Name,
side,
Destination,
age.group)) %>%
mutate(CryoSleep = factor(CryoSleep),
side.starboard = factor(side.starboard),
side.port = factor(side.port),
Earth.home = factor(Earth.home),
Europa.home = factor(Europa.home),
dest.TRAP = factor(dest.TRAP),
dest.55 = factor(dest.55),
deck.B = factor(deck.B),
deck.C = factor(deck.C),
deck.D = factor(deck.D),
deck.E = factor(deck.E),
deck.F = factor(deck.F),
VR.use = factor(VR.use),
Transported = factor(Transported))
# unseen.dummy.1
unseen.dummy.1 <- unseen.dummy %>%
select(!c(party.identifiers,
HomePlanet,
deck,
VIP,
RoomService,
FoodCourt,
ShoppingMall,
Spa,
VRDeck,
Name,
side,
Destination,
age.group)) %>%
mutate(CryoSleep = factor(CryoSleep),
side.starboard = factor(side.starboard),
side.port = factor(side.port),
Earth.home = factor(Earth.home),
Europa.home = factor(Europa.home),
dest.TRAP = factor(dest.TRAP),
dest.55 = factor(dest.55),
deck.B = factor(deck.B),
deck.C = factor(deck.C),
deck.D = factor(deck.D),
deck.E = factor(deck.E),
deck.F = factor(deck.F),
VR.use = factor(VR.use))
train.index <- createDataPartition(train.dummy.1$Transported,
p = 0.85,
times = 1,
list = FALSE)
train.set <- train.dummy.1 %>% slice(train.index)
test.set <- train.dummy.1 %>% slice(-train.index)
train_glm <- train(Transported ~.,
method = "glm",
data = train.set)
y_hat_glm <- predict(train_glm,
test.set,
type = "raw")
cmglm <- confusionMatrix(y_hat_glm,
test.set$Transported)
data.frame(Accuracy = cmglm$overall["Accuracy"],
Sensitivity = cmglm$byClass["Sensitivity"],
Specificity = cmglm$byClass["Specificity"])
control <- trainControl(method = "cv",
number = 10,
p = 0.9)
train_knn <- train(Transported ~.,
method = "knn",
data = train.set,
tuneGrid = data.frame(k = c(3:18)),
trControl = control)
fit_knn <- knn3(Transported ~ .,
data = train.set,
k = train_knn$bestTune$k)
y_hat_knn <- predict(fit_knn,
test.set,
type = "class")
cmknn <- confusionMatrix(y_hat_knn,
test.set$Transported)
data.frame(Accuracy = cmknn$overall["Accuracy"],
Sensitivity = cmknn$byClass["Sensitivity"],
Specificity = cmknn$byClass["Specificity"])
train_rpart <- train(Transported ~ .,
method = "rpart",
data = train.set,
tuneGrid = data.frame(cp = seq(0,2, len = 30)))
y_hat_rpart <- predict(train_rpart,
test.set)
cmrpart <- confusionMatrix(y_hat_rpart,
test.set$Transported)
data.frame(Accuracy = cmrpart$overall["Accuracy"],
Sensitivity = cmrpart$byClass["Sensitivity"],
Specificity = cmrpart$byClass["Specificity"])
train_rf <- train(Transported ~.,
method = "rf",
data = train.set,
tuneGrid = data.frame(mtry = seq(1:17)),
ntree = 500)
View(mean.age2)
fit_rf <- randomForest(Transported ~.,
data = train.set,
minNode = train_rf$bestTune$mtry)
y_hat_rf <- predict(fit_rf,
test.set)
cmrf <- confusionMatrix(y_hat_rf,
test.set$Transported)
data.frame(Accuracy = cmrf$overall["Accuracy"],
Sensitivity = cmrf$byClass["Sensitivity"],
Specificity = cmrf$byClass["Specificity"])
Method <- c("Generalized Linear Model",
"K-Nearest-Neighbor",
"Classification Tree",
"Random Forest")
Accuracy <- c(cmglm$overall["Accuracy"],
cmknn$overall["Accuracy"],
cmrpart$overall["Accuracy"],
cmrf$overall["Accuracy"])
Sensitivity <- c(cmglm$byClass["Sensitivity"],
cmknn$byClass["Sensitivity"],
cmrpart$byClass["Sensitivity"],
cmrf$byClass["Sensitivity"])
Specificity <- c(cmglm$byClass["Specificity"],
cmknn$byClass["Specificity"],
cmrpart$byClass["Specificity"],
cmrf$byClass["Specificity"])
data.frame(Method,Accuracy,Sensitivity,Specificity)
predict_unseen <- predict(fit_rf,
newdata = unseen.dummy.1,
type = "prob")
predict_unseen <- as.data.frame(predict_unseen)
colnames(predict_unseen) <- c("predict.no","predict.yes")
predict_unseen <- predict_unseen %>%
mutate(Transported = ifelse(predict.yes > predict.no, "True","False"))
predict_unseen <- cbind(unseen$PassengerId,predict_unseen)
predict_unseen <- predict_unseen %>%
select(!c(predict.no,
predict.yes))
colnames(predict_unseen) <- c("PassengerId","Transported")
head(predict_unseen,20)
cmrf
data.frame(Accuracy = cmglm$overall["Accuracy"],
Sensitivity = cmglm$byClass["Sensitivity"],
Specificity = cmglm$byClass["Specificity"],
P-value = cmlm$overall["P-Value [Acc > NIR]"])
